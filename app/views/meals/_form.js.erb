$(document).bind('ajaxError', 'form#actual-meal-form', function(event, jqxhr, settings, exception){
  // note: jqxhr.responseJSON undefined, parsing responseText instead

  // TODO this is sort of hacky, but distinguish between the external meal form and internal
  // ingredient form failing
  if (settings.url == "/ingredients.json") {
    $('#actual-ingredient-form').render_form_errors( $.parseJSON(jqxhr.responseText) );
  } else {
    $(event.data).render_form_errors( $.parseJSON(jqxhr.responseText) );
  }

});

$('#ingredient-form-insert').on('click', function () {
  if ($('#ingredient-form').is(":visible")) {
    $('#ingredient-form').hide();
  } else {
    $('#ingredient-form').show();
  }
});

$("#meal-form").on("shown.bs.modal", function() {
  var config = {
    '.chosen'                  : {},
    '.chosen-select'           : {},
    '.chosen-select-deselect'  : {allow_single_deselect:true},
    '.chosen-select-no-single' : {disable_search_threshold:10},
    '.chosen-select-no-results': {no_results_text:'Oops, nothing found!'}
  }

  for (var selector in config) {
    $(".chosen").chosen(config[selector]);
  }

  $('#meal_ingredient_ids').on('change', function(e, params) {
    var selected = params.selected;
    var $target = $('#_finished_ingredient_ids');
    if (selected) {
      var option = $('#meal_ingredient_ids option[value=' + selected + ']').clone();
      var opt = option[0];
      $target.append(opt);
      $target.find(opt).removeAttr("selected");
      $target.trigger("chosen:updated");

      return;
    }

    var deselected = params.deselected;
    if (deselected) {
      var option = $('#_finished_ingredient_ids option[value=' + deselected + ']');
      option.remove();
      $target.trigger("chosen:updated");
    }
  });

  $('.chosen').on('chosen:showing_dropdown', function (evt, params) {
    var absolute_position = $(this).closest('.modal-body').scrollTop() + $(this).closest('.form-group').position().top;
    $('.modal-body').animate({
      scrollTop: absolute_position - 150 // scroll to the middle of the chosen clicked
    }, 1000);
  });
});

$('#actual-ingredient-form').submit(function (e) {
  $.ajax({
    url: "<%= ingredients_path(format: 'json') %>",
    type: 'POST',
    data: $(this).serialize()
  }).done(function (data) {
    $('#meal_ingredient_ids').append('<option selected="true" value=' + data.id + '>' + data.name + '</option>');
    $('#meal_ingredient_ids').trigger("chosen:updated");
    $('#meal_ingredient_ids').trigger('change', { 'selected': data.id });
    $('#actual-ingredient-form').ajax_form_success();
  });
  e.preventDefault();
  return false;
});

$(document).ready(function(){
  $('#ingredient-form').insertAfter('#ingredient-form-insert');

  $("#datepicker").datepicker();
  <% if @meal.date %>
    var rubydate = "<%= @meal.date.strftime('%Y-%m-%d') %>"
    var parts = rubydate.split("-");
    var dt = new Date(parseInt(parts[0], 10), // year
                parseInt(parts[1], 10) - 1, // month
                parseInt(parts[2], 10)); // day
    $("#datepicker").datepicker("setDate", dt );
  <% end %>

});
